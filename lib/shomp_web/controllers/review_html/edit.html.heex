<Layouts.app flash={@flash} current_scope={@current_scope}>
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="mx-auto max-w-2xl px-4">
      <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <!-- Header -->
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-xl font-semibold text-gray-900">Edit Your Review</h1>
              <p class="text-sm text-gray-500 mt-1">Update your thoughts about <%= @product.title %></p>
            </div>
            <.link
              href={~p"/stores/#{@product.store.slug}/products/#{@product.id}"}
              class="text-blue-600 hover:text-blue-800 text-sm"
            >
              ‚Üê Back to Product
            </.link>
          </div>
        </div>
        
        <div class="px-6 py-6">
          <.form for={@changeset} action={~p"/stores/#{@product.store.slug}/products/#{@product.id}/reviews/#{@review.id}"} method="post">
            <input type="hidden" name="_method" value="put" />
            
            <!-- Product Info -->
            <div class="mb-6 p-4 bg-gray-50 rounded-lg">
              <h3 class="font-semibold text-gray-900 mb-2"><%= @product.title %></h3>
              <p class="text-sm text-gray-600">from <%= @product.store.name %></p>
            </div>
            
            <!-- Rating -->
            <div class="mb-6">
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Rating *
              </label>
              <div class="flex items-center space-x-1" id="star-rating-container">
                <%= for rating <- 1..5 do %>
                  <button 
                    type="button"
                    class="star-rating-btn p-1 transition-colors duration-200"
                    data-rating={rating}
                  >
                    <svg class={"w-8 h-8 #{if rating <= @review.rating, do: "text-yellow-400 fill-current", else: "text-gray-300"}"} viewBox="0 0 24 24">
                      <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                    </svg>
                  </button>
                <% end %>
              </div>
              <input type="hidden" name="review[rating]" value={@review.rating} id="rating-input" />
              <%= if @changeset.errors[:rating] do %>
                <p class="mt-1 text-sm text-red-600"><%= elem(@changeset.errors[:rating], 0) %></p>
              <% end %>
            </div>

            <!-- Review Text -->
            <div class="mb-6">
              <label for="review_review_text" class="block text-sm font-medium text-gray-700 mb-2">
                Review Text
              </label>
              <textarea
                id="review_review_text"
                name="review[review_text]"
                rows="6"
                class="w-full px-4 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-gray-900 text-base leading-relaxed"
                placeholder="Share your thoughts about this product. What did you like? What could be improved? (Optional - you can leave this blank)"
              ><%= @review.review_text %></textarea>
              <%= if @changeset.errors[:review_text] do %>
                <p class="mt-1 text-sm text-red-600"><%= elem(@changeset.errors[:review_text], 0) %></p>
              <% end %>
              <p class="mt-1 text-sm text-gray-500">
                <span id="char-count"><%= String.length(@review.review_text || "") %></span> character<%= if String.length(@review.review_text || "") != 1, do: "s" %> / 2000
              </p>
            </div>

            <!-- Action Buttons -->
            <div class="flex items-center justify-between">
              <div class="flex space-x-3">
                <button 
                  type="button"
                  onclick="if(confirm('Are you sure you want to delete this review?')) { document.getElementById('delete-form').submit(); }"
                  class="btn btn-outline btn-error"
                >
                  Delete Review
                </button>
              </div>
              <div class="flex space-x-3">
                <.link
                  href={~p"/stores/#{@product.store.slug}/products/#{@product.id}"}
                  class="btn btn-outline"
                >
                  Cancel
                </.link>
                <button type="submit" class="btn btn-primary">
                  Update Review
                </button>
              </div>
            </div>
          </.form>

          <!-- Hidden delete form -->
          <form id="delete-form" action={~p"/stores/#{@product.store.slug}/products/#{@product.id}/reviews/#{@review.id}"} method="post" class="hidden">
            <input type="hidden" name="_method" value="delete" />
          </form>
        </div>
      </div>
    </div>
  </div>
</Layouts.app>

<script>
  // Star rating interaction with hover effects
  document.addEventListener('DOMContentLoaded', function() {
    const starContainer = document.getElementById('star-rating-container');
    const stars = starContainer.querySelectorAll('.star-rating-btn');
    const ratingInput = document.getElementById('rating-input');
    let currentRating = parseInt(ratingInput.value) || 0;

    // Hover effects
    stars.forEach((star, index) => {
      const rating = index + 1;
      
      // Mouse enter - fill stars up to this one
      star.addEventListener('mouseenter', function() {
        updateStarDisplay(rating, true);
      });
      
      // Mouse leave - restore to current rating
      star.addEventListener('mouseleave', function() {
        updateStarDisplay(currentRating, false);
      });
      
      // Click - set new rating
      star.addEventListener('click', function() {
        currentRating = rating;
        ratingInput.value = rating;
        updateStarDisplay(currentRating, false);
      });
    });

    function updateStarDisplay(rating, isHover) {
      stars.forEach((star, index) => {
        const starRating = index + 1;
        const svg = star.querySelector('svg');
        
        if (starRating <= rating) {
          svg.classList.remove('text-gray-300');
          svg.classList.add('text-yellow-400', 'fill-current');
        } else {
          svg.classList.remove('text-yellow-400', 'fill-current');
          svg.classList.add('text-gray-300');
        }
      });
    }

    // Character count update function
    function updateCharCount(text) {
      const charCountElement = document.getElementById('char-count');
      if (charCountElement) {
        const count = text.length;
        charCountElement.textContent = count;
        
        // Update pluralization
        const charText = count === 1 ? 'character' : 'characters';
        const nextSibling = charCountElement.nextSibling;
        if (nextSibling && nextSibling.textContent) {
          nextSibling.textContent = ` ${charText} / 2000`;
        }
      }
    }

    // Add event listener to textarea
    const textarea = document.getElementById('review_review_text');
    if (textarea) {
      textarea.addEventListener('input', function() {
        updateCharCount(this.value);
      });
    }
  });
</script>
